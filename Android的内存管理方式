在adbLinux系统命令中通过 
ps 查看系统里面的进程命令
dumpsys meminfo

Android 系统内存分配与回收方式
一个APP 通产就是一个进程对应一个虚拟机
GC只是在Heap剩余空间不够时才触发垃圾回收
GC触发时,所有的线程都是会被暂停的

切换应用时后台APP清理机制
APP切换时的 LRU Cached(后台APP是按照LRU排序的,最近使用的放到最前面)
onTrimMemory()回调方法

数据结构的优化

1 . 频繁字符串拼接用StringBuilder
2 . ArrayMap SparseArray替代HashMap
3 . 内存抖动(变量使用不当)[例如在循环中创建对象]

再小的Class耗费0.5KB
HashMap 一个entry 需要32B

对象复用
1 . 复用系统自带的资源
2 . ListView GridView的ConvertView复用
3 . 避免在onDraw方法里面执行对象的创建

内存泄漏: 由于代码瑕疵,导致这块内存,虽然停止不用了,但依然被其他对象引用着,使得GC没办法对他回收.
内存泄漏会导致剩余的可用的heap越来越少,频繁触发GC
1 . 尤其Activity很容易泄漏.[如在activity中使用耗时的Thread 导致activity不能被回收,解决,可以将数据获取的线程放到service中]
2 . 建议使用APPlication Context 而不是Activity Context(因为activity设计到进入进出,如果被引用导致内存不能被释放)
3 . 注意Cursor对象要及时关闭

在需要传递Context参数的时候，如果是在Activity中，我们可以传递this（这里的this指的是Activity.this，是当前Activity的上下文）
或者Activity.this。这个时候如果我们传入getApplicationContext()，我们会发现这样也是可以用的。
可是大家有没有想过传入Activity.this和传入getApplicationContext()的区别呢？首先Activity.this和getApplicationContext()返回的不是同一个对象，
一个是当前Activity的实例，一个是项目的Application的实例，这两者的生命周期是不同的，它们各自的使用场景不同，
this.getApplicationContext()取的是这个应用程序的Context，它的生命周期伴随应用程序的存在而存在；
而Activity.this取的是当前Activity的Context，它的生命周期则只能存活于当前Activity，这两者的生命周期是不同的。
我们主要记住一点，凡是跟UI相关的，都用Activity做为Context来处理
this.getApplicationContext()，当应用程序摧毁的时候，它才会摧毁；Activity.this的context是属于当前Activity的，当前Activity摧毁的时候，它就摧毁。


优化oom问题的方法
1 . 注意临时bitmap对象的及时回收 置于空或者recycle 回收
2 . 避免bitmap的浪费
3 . try catch 某些大内存分配的操作
4 . 加载bitmap :缩放比例,解码格式 ,局部加载








