Arraylist linkedList

arraylist 使用了数组的实现，即基于动态数组的
linkedlist 使用双向链表数据结构，链表由表项链接而成，一个表项包含：元素内容，前驱表，后驱表

1、增加元素在列表尾端
只要ArrayList的当前容量足够大，add()操作的效率非常高的。只有当ArrayList对容量的需求超出当前数组大小时，
才需要进行扩容。扩容的过程中，会进行大量的数组复制操作。而数组复制时，最终将调用System.arraycopy()方法，因此add()操作的效率还是相当高的。
LinkeList由于使用了链表的结构，因此不需要维护容量的大小。从这点上说，它比ArrayList有一定的性能优势，
然而，每次的元素增加都需要新建一个Entry对象，并进行更多的赋值操作。在频繁的系统调用中，对性能会产生一定的影响。

2、增加元素在任意位置
除了提供元素到List的尾端，List接口还提供了在任意位置插入元素的方法：void add(int index,E element);
ArrayList是基于数组实现的，而数组是一块连续的内存空间，如果在数组的任意位置插入元素，
必然导致在该位置后的所有元素需要重新排列，因此，其效率相对会比较低。
而这个操作在增加元素到List尾端的时候是不存在的，大量的数组重组操作会导致系统性能低下。并且插入元素在List中的位置越是靠前，数组重组的开销也越大。
LinkedList来说，在List的尾端插入数据与在任意位置插入数据是一样的，不会因为插入的位置靠前而导致插入的方法性能降低

3、删除任意位置元素
ArrayList来说，remove()方法和add()方法是雷同的。在任意位置移除元素后，都要进行数组的重组。
rayList的每一次有效的元素删除操作后，都要进行数组的重组。并且删除的位置越靠前，数组重组时的开销越大
LinkedList的实现中，首先要通过循环找到要删除的元素。如果要删除的位置处于List的前半段，则从前往后找；若其位置处于后半段，则从后往前找。
因此无论要删除较为靠前或者靠后的元素都是非常高效的；但要移除List中间的元素却几乎要遍历完半个List，在List拥有大量元素的情况下，效率很低。

4、容量参数
容量参数是ArrayList和Vector等基于数组的List的特有性能参数。它表示初始化的数组大小。当ArrayList所存储的元素数量超过其已有大小时。
它便会进行扩容，数组的扩容会导致整个数组进行一次内存复制。因此合理的数组大小有助于减少数组扩容的次数，从而提高系统性能。

现以构造一个拥有100万元素的List为例，当使用默认初始化大小时，其消耗的相对时间为125ms左右，
当直接制定数组大小为100万时，构造相同的ArrayList仅相对耗时16ms。

5、遍历列表，三种遍历方式 foreach  iterator  for循环
同样的100万条数据 arraylist 
foreach(110)>iterator(81)>for(16)
linkedlist 
foreach(78)>iterator(15)  for(无穷大)
在linkedList中要避免使用for循环

6、对于随机访问arrayList优于LinkedList
 对于随机访问get和set，ArrayList要优于LinkedList，
 arrayList 直接返回index位置上的元素，LinkedList要移动指针，通过for循环进行查找





